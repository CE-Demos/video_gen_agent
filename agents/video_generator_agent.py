# agents/video_generator_agent.py
import logging
import os
import time
from typing import Dict, Any
from utils.video_utils import concatenate_videos  # Assuming you might concatenate later
from config import GCS_BUCKET_NAME, VEO_API_KEY  # Assuming you'll use the API key this way
from utils.gcs_utils import upload_to_gcs  # If you want to save generated videos to GCS
from google import genai
from google.genai import types

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Directory to save temporary generated videos
OUTPUT_VIDEO_DIR = "temp_generated_videos"
os.makedirs(OUTPUT_VIDEO_DIR, exist_ok=True)

class VideoGeneratorAgent:
    """
    Agent responsible for receiving text prompts and generating videos using the Veo model.
    """
    def __init__(self, output_dir=OUTPUT_VIDEO_DIR, gcs_bucket_name=GCS_BUCKET_NAME, veo_api_key=VEO_API_KEY):
        """
        Initializes the VideoGeneratorAgent.

        Args:
            output_dir (str): Directory to save temporary generated videos.
            gcs_bucket_name (str): Name of the GCS bucket to save videos (optional).
            veo_api_key (str): The API key for accessing the Google GenAI API.
        """
        self.output_dir = output_dir
        self.gcs_bucket_name = gcs_bucket_name
        self.veo_api_key = veo_api_key
        # genai.configure(api_key=self.veo_api_key)
        self.client = genai.Client(api_key=self.veo_api_key)
        logging.info(f"VideoGeneratorAgent initialized. Output Directory: {self.output_dir}, GCS Bucket: {self.gcs_bucket_name}")

    def generate_video(self, prompt: str, aspect_ratio: str = "16:9", allow_people: str = "dont_allow") -> Dict[str, Any]:
        """
        Generates a video based on the provided text prompt and configuration.
        """
        logging.info(f"Generating video for prompt: '{prompt}', Aspect Ratio: {aspect_ratio}, Allow People: {allow_people}")
        try:
            operation = self.client.models.generate_videos(
                model="veo-2.0-generate-001",
                prompt=prompt,
                config=types.GenerateVideosConfig(
                    person_generation=allow_people,
                    aspect_ratio=aspect_ratio,
                ),
            )

            while not operation.done:
                time.sleep(20)
                operation = self.client.operations.get(operation)

            generated_video_path = None
            if operation.response and operation.response.generated_videos:
                generated_video = operation.response.generated_videos[0] # Assuming only one video is generated
                filename = f"veo_generated_{prompt[:20].replace(' ', '_')}_{time.time()}.mp4"
                output_path = os.path.join(self.output_dir, filename)
                self.client.files.download(file=generated_video.video)
                generated_video.video.save(output_path)
                generated_video_path = output_path
                logging.info(f"Video generation successful. Saved at: {generated_video_path}")
                return {"status": "success", "video_path": generated_video_path}
            else:
                error_message = "Error: No video was generated by the Veo model."
                logging.error(error_message)
                return {"status": "error", "message": error_message}

        except Exception as e:
            error_message = f"An error occurred during video generation: {e}"
            logging.error(error_message)
            return {"status": "error", "message": error_message}

    # Optional: Function to handle concatenation if triggered by another agent
    def concatenate_videos_agent(self, video_paths: list) -> Dict[str, Any]:
        # ... (your concatenation logic) ...
        pass

    # Optional: Function to upload the generated video to GCS
    def upload_video_to_gcs(self, video_path: str, destination_blob_name: str) -> Dict[str, Any]:
        """
        Internal function to upload the generated video to Google Cloud Storage.
        """
    def upload_video_to_gcs(self, video_path: str, destination_blob_name: str) -> Dict[str, Any]:
        """
        Internal function to upload the generated video to Google Cloud Storage.
        """
        if not self.gcs_bucket_name:
            logging.error("GCS bucket name not configured, upload failed.")
            return {"status": "error", "message": "GCS bucket name not configured."}
        if not os.path.exists(video_path):
            logging.error(f"Video file not found at: {video_path}, upload failed.")
            return {"status": "error", "message": f"Video file not found at: {video_path}"}
        try:
            if upload_to_gcs(self.gcs_bucket_name, video_path, destination_blob_name):
                gcs_uri = f"gs://{self.gcs_bucket_name}/{destination_blob_name}"
                logging.info(f"Video uploaded to GCS successfully: {gcs_uri}")
                return {"status": "success", "gcs_uri": gcs_uri}
            else:
                logging.error(f"Error occurred during upload of {video_path} to GCS.")
                return {"status": "error", "message": f"Error occurred during upload of {video_path} to GCS."}
        except Exception as e:
            logging.error(f"Exception during GCS upload: {e}")
            return {"status": "error", "message": f"Exception during GCS upload: {e}"}
        

    # Example of how this agent might be run or integrated
    def run(self, data: Dict[str, Any]):
        prompt = data.get("prompt")
        if prompt:
            return self.generate_video(prompt)
        else:
            error_message = "Error: No 'prompt' found in the input data."
            logging.error(error_message)
            return {"status": "error", "message": error_message}

if __name__ == "__main__":
    # This block is for local testing and won't be executed when deployed as a Vertex AI Agent.
    # Ensure you have the GOOGLE_API_KEY environment variable set.
    os.environ["GOOGLE_API_KEY"] = "AIzaSyCwtqZvVOiEx86-ZY1Xssn1sw6sikVLia0" # Replace with your actual API key for local testing
    generator_agent = VideoGeneratorAgent()
    example_prompt = "A futuristic cityscape at dawn with flying vehicles."
    generation_result = generator_agent.generate_video(example_prompt)
    print(f"Generation Result: {generation_result}")

    if generation_result.get("status") == "success":
        upload_result = generator_agent.upload_video_to_gcs(generation_result["video_path"])
        print(f"GCS Upload Result: {upload_result}")